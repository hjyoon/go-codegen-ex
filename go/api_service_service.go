/*
 * example
 *
 * description example.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
)

// ServiceApiService is a service that implements the logic for the ServiceApiServicer
// This service should implement the business logic for every endpoint for the ServiceApi API.
// Include any external packages or services that will be required by this service.
type ServiceApiService struct {
}

// NewServiceApiService creates a default api service
func NewServiceApiService() ServiceApiServicer {
	return &ServiceApiService{}
}

// Liveness - 
func (s *ServiceApiService) Liveness(ctx context.Context) (ImplResponse, error) {
	// TODO - update Liveness with the required logic for this service method.
	// Add api_service_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	return Response(200, map[string]string{"message": "Hello Ghost"}),nil

	// return Response(http.StatusNotImplemented, nil), errors.New("Liveness method not implemented")
}

// Ready - 
func (s *ServiceApiService) Ready(ctx context.Context) (ImplResponse, error) {
	// TODO - update Ready with the required logic for this service method.
	// Add api_service_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	return Response(200, map[string]string{"message": "Hi Ghost"}),nil

	// return Response(http.StatusNotImplemented, nil), errors.New("Ready method not implemented")
}
